# import sqlite3
from pathlib import Path
from datetime import datetime
from PIL import Image
from sqlalchemy import and_
from sqlalchemy import create_engine
from sqlalchemy import DateTime
from sqlalchemy import Column
from sqlalchemy import Float, LargeBinary, Integer, String
from sqlalchemy import ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
# from sqlalchemy.orm import Session
from settings import db_file
from db.session import get_sqlalchemy_session
# from utils.images import image_to_string, string_to_image 

# https://docs.sqlalchemy.org/en/14/_modules/examples/association/basic_association.html

Base = declarative_base()
clients_table = "client"
ck_img_table = "ckimage"


class Client(Base):
    __tablename__ = clients_table

    id = Column(Integer, primary_key=True)
    name = Column(String(30), nullable=False)
    created_date = Column(DateTime, nullable=False, default=datetime.now())
    cks_images = relationship(
        "CkImage", cascade="all, delete-orphan", backref=clients_table
    )

    # add autogenerated column to Client here

    def __init__(self, name):
        self.name = name

    def save_to_db(self):
        with get_sqlalchemy_session() as session:
            session.add(self)
            session.commit()
            session.close() # ?


class CkImage(Base):
    __tablename__ = ck_img_table 
    id = Column(Integer, primary_key=True)
    client_id = Column(Integer, ForeignKey("client.id"))
    # client_id = Column(Integer, ForeignKey("client.id"), primary_key=True)

    period = Column(String(7)) # windows path max len is 260
    path = Column(String()) # windows path max len is 260
    ck_number = Column(String())
    alt_number = Column(String())
    payee_img_as_bytes =  Column(LargeBinary())
    payee_img_mode = Column(String())
    payee_img_width = Column(Integer)
    payee_img_height = Column(Integer)
    payee_img_path = Column(String()) # windows path max len is 260
    
    payee_txt_hugginface = Column(String()) # windows path max len is 260
    payee_txt_textract = Column(String()) # windows path max len is 260
    vendor = Column(String())
    client_name = Column(String())
    other1 = Column(String())
    other2 = Column(String())
    # alt_number = Column(Float, nullable=False)
    # client = relationship("Client", back_populates=ck_img_table)

    def __init__(self, 
                 period,
                 path,
                 ck_number,
                 alt_number,
                 payee_img_as_bytes,
                 payee_img_mode,
                 payee_img_width,
                 payee_img_height,
                 payee_txt_hugginface,
                 payee_txt_textract,
                 ):

        self.period = period
        self.path = path
        self.ck_number = ck_number
        self.alt_number = alt_number

        self.payee_img_as_bytes = payee_img_as_bytes
        self.payee_img_mode = payee_img_mode
        self.payee_img_width = payee_img_width
        self.payee_img_height = payee_img_height
        self.payee_img_path = "" # when method save_payee_img... is called with a vendor 

        self.payee_txt_hugginface = payee_txt_hugginface
        self.payee_txt_textract = payee_txt_textract
        # self.number_image # do NOT need, bc only used to try to get ck number, otherwiese, will not be used in the future, as opposed to payee_image which will be used for training
        # self.amount # No, bc amount is more reliable from statement pdf. Ck images is just for try infer vendor & show image

    def save_to_db(self, client_name):
        self.client_name = client_name
        with get_sqlalchemy_session() as session:
            client = session.query(Client).filter_by(name=client_name).one()
            client.cks_images.append(self)
            session.commit()
            session.close() # maybe not needed?


    def save_payee_img_in_dir(self, payees_imgs_dir, vendor):
        """saving under vendor for future model training"""
        vendor_payee_imgs_dir = Path(payees_imgs_dir)
        vendor_payee_imgs_dir = payees_imgs_dir / vendor
        vendor_payee_imgs_dir.mkdir(parents=True, exist_ok=True)
        name = ( f"{self.period}_"
                 f"{vendor}_"
                 f"{self.alt_number}_"
                 f"{self.ck_number}_"
                 f".jpg")
        path = vendor_payee_imgs_dir / name
        payee_img = Image.frombytes(self.payee_img_mode,
                                    (self.payee_img_width,
                                    self.payee_img_height), # needs a tuple of int
                                    self.payee_img_as_bytes)
        payee_img.save(str(path))
        self.payee_img_path = str(path)
        self.save_to_db(self.client_name)


    def show_payee_img(self):
        payee_img = Image.frombytes(self.payee_img_mode,
                                    (self.payee_img_width,
                                    self.payee_img_height), # needs a tuple of int
                                    self.payee_img_as_bytes)
        payee_img.show()

    def show_ck_img(self):
        img = Image.open(self.path)
        img.show()

# How create many-to-many relationships # https://docs.sqlalchemy.org/en/14/_modules/examples/association/basic_association.html

